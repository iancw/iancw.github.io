---
layout: post
status: publish
published: true
title: Repository Structure &#47; code organization
author:
  display_name: ian
  login: ian
  email: icwill@gmail.com
  url: http://iancwill.com/blog
author_login: ian
author_email: icwill@gmail.com
author_url: http://iancwill.com/blog
wordpress_id: 17
wordpress_url: http://iancwill.com/blog/?p=17
date: '2008-07-04 00:05:00 -0600'
date_gmt: '2008-07-04 00:05:00 -0600'
categories:
- Uncategorized
tags: []
comments: []
---
<p>Monday:&nbsp; LA (Recovering from PST&#47;late plane arrival and sorting out pictures)<br &#47;>Tuesday:&nbsp; Why doesn't my project compile any more?<br &#47;>Wednesday:&nbsp; Why does my project still fail to compile?<br &#47;>Thursday:&nbsp; Why can't our custom class loader find my classes?<br &#47;><br &#47;>Read:&nbsp; A lot of wasted time.&nbsp; Contributing factors?&nbsp; Kinks in our development setup and unnecessary complexity.<br &#47;><br &#47;>Tuesday and Wednesday were dedicated to figuring out why the heck my code would no longer build.&nbsp; The answer lay in our repository structure, and a recent addition by a third-party developer to our code base.&nbsp; We use Eclipse and svn.&nbsp; Our code is broken into a huge number of projects.&nbsp;Our repository structure like this: <br &#47;><br &#47;>svn&#47;root&#47;trunk&#47;BaseLibs (theoretically shared across our division)<br &#47;>svn&#47;root&#47;trunk&#47;CoreLibs (built on base libs, specific to our group)<br &#47;>svn&#47;root&#47;trunk&#47;CoreGuiLibs (swing related, group code)<br &#47;>svn&#47;root&#47;trunk&#47;DatabaseComponent (but with a way more obscure name, pulled from the dusty depths of 20 years of jargon tradition)<br &#47;>svn&#47;root&#47;trunk&#47;DomainComponent (name also de-obscured)<br &#47;>svn&#47;root&#47;trunk&#47;CustomerA-iteration1<br &#47;>svn&#47;root&#47;trunk&#47;CustomerB-iteration1<br &#47;>svn&#47;root&#47;trunk&#47;CustomerA-iteration2<br &#47;>svn&#47;root&#47;trunk&#47;Application<br &#47;>svn&#47;root&#47;AppFeatureA<br &#47;>svn&#47;root&#47;AppFeatureB<br &#47;>svn&#47;root&#47;PluginA<br &#47;>svn&#47;root&#47;PluginB<br &#47;>svn&#47;root&#47;Plugins (contains a complex package structure for many un-related plugins)<br &#47;><br &#47;>I don't think listing de-jargonized repository paths is doing much to convey my point so we'll move on.&nbsp; A few observations about the organization scheme...<br &#47;>It appears our repository organization philosophy has pendulumed between two ideals.&nbsp; The first is that each task (each "effort," with tangible completion criteria) should have its own project (i.e. an Eclipse project) and all of those should reside in the trunk directory without further hierarchical organization.&nbsp; <br &#47;><br &#47;>A few words about that strategy...<br &#47;>It exhibits a management anti-pattern:&nbsp; that all efforts with tangible completion criteria must produce *new code*.&nbsp; It seems very clear to me that our group is dangerously, and to its detriment, blind to the importance and possibility of improving existing code or expanding it to cover new requirements.&nbsp; Instead, a new requirement means a new effort with completely new code.&nbsp; Similarity to existing functionality is ignored.&nbsp; Orthogonality of the resulting product is not considered relevant.&nbsp; We end up with an amalgamation of very specific code that meets very specific customer requirements.&nbsp; (And which frequently is very similar...except for a couple minor changes.)&nbsp; (I'm sure this contributes to our liberal use of copy-paste coding.)<br &#47;><br &#47;>Secondly (and more pragmatically) the strategy of dumping every effort into a flat directory (svn&#47;root&#47;trunk) quickly turns into a lot of names to keep track of.&nbsp; I remember as a new developer on the team being totally overwhelmed by the sheer number of project names I had to sort through to find something.&nbsp; Without a history with the project and a familiarity with every individual effort undertaken by the software team, it's very difficult to make any sense of the trunk contents; there's a lot of noise to wade through.&nbsp; With more projects (and more obscure and confusing the project names), the confusion grows exponentially.<br &#47;><br &#47;>The competing outlook is that the trunk should be organized into a few ( < 10 ) eclipse projects which build on each other, becoming more customer specific the higher they get.&nbsp; <br &#47;><br &#47;>This option appears to have been in vogue at one point, because a few of our projects are organized this way (most notably the Plugins project), but was apparently abandoned and the original (flat, project proliferation) seems to be the current fashion.</p>
